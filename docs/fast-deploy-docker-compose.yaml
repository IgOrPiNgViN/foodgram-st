version: '3.8'
volumes:
  postgres_data:
  static_volume:
  media_volume:
services:
  frontend:
    env_file: docker.env
    image: pupslchek/foodgram_st_frontend:latest
    container_name: foodgram_frontend
    command: cp -r /app/build/. /static/
    volumes:
      - static_volume:/app/static/
    networks:
      - app_network
    restart: always
    depends_on:
      - gateway
  db:
    image: postgres:13.0-alpine
    env_file: docker.env
    container_name: foodgram_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_DB=foodgram
      - POSTGRES_USER=foodgram_user
      - POSTGRES_PASSWORD=foodgram_password
  backend:
    image: pupslchek/foodgram_st_backend:latest
    env_file: docker.env
    container_name: foodgram_backend
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
    networks:
      - app_network
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - DEBUG=0
      - DEMO_DATA=1
  nginx:
    image: pupslchek/foodgram_st_gateway:latest
    env_file: docker.env
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - app_network
    restart: always
    depends_on:
      - backend
networks:
  app_network:
    driver: bridge
