version: '3.8'

volumes:
  postgres_data:
  static_volume:
  media_volume:


services:

  frontend:
    env_file: docker.env

    build: ./frontend/

    command: cp -r /app/build/. /static/

    volumes:
      - static_volume:/app/static/
    networks:
      - app_network
    restart: always

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - app_network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
    env_file:
      - .env
    networks:
      - app_network
    restart: always
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000"

  nginx:
    image: nginx:1.25
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - app_network
    restart: always
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge
